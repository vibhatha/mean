__author__ = 'Vbabey'
import numpy as np
def identify(input):
    
    X_input =[]
    #print('Input :'+input)
    
    values=str.split(input, ",")
    #print(values)  
    if(len(values)==5):
            array=list(map(float, values))
            #print(array)
            X_input.append(array)
    #print(X_input)     
    
    X = np.array([[59.13, 63.00, 232.60, 0.27, 0.94],
    [58.62, 62.33, 232.45, 0.27, 0.94],[57.77, 61.66, 232.64, 0.27, 0.94],[59.02, 62.94, 232.65, 0.27, 0.94],[58.14, 62.02, 232.49, 0.27, 0.94],
    [58.99, 62.90, 232.54, 0.27, 0.94],[59.19, 62.94, 232.73, 0.27, 0.94],[57.91, 61.84, 232.78, 0.27, 0.94],[59.41, 62.95, 232.77, 0.27, 0.94],
    [58.84, 62.53, 232.61, 0.27, 0.94],[58.62, 62.24, 232.39, 0.27, 0.94],[59.25, 63.21, 233.36, 0.27, 0.94],[59.49, 63.30, 232.62, 0.27, 0.94],
    [59.34, 62.86, 232.64, 0.27, 0.94],[58.86, 62.66, 232.74, 0.27, 0.94],[59.62, 63.71, 233.30, 0.27, 0.94],[58.39, 62.23, 232.45, 0.27, 0.94],
    [58.90, 62.56, 232.53, 0.27, 0.94],[58.97, 62.90, 229.02, 0.27, 0.94],[60.03, 63.94, 230.12, 0.28, 0.94],[58.74, 62.74, 230.19, 0.27, 0.94],
    [58.73, 62.92, 230.02, 0.27, 0.93],[59.07, 63.09, 229.94, 0.27, 0.94],[57.94, 61.80, 229.91, 0.27, 0.94],[59.38, 63.22, 229.82, 0.28, 0.94],
    [58.28, 62.18, 229.84, 0.27, 0.94],[58.99, 62.42, 229.91, 0.27, 0.95],[59.48, 63.44, 229.86, 0.28, 0.94],[58.52, 62.29, 228.85, 0.27, 0.94],[59.07, 63.36, 229.82, 0.28, 0.93],[57.74, 61.61, 230.03, 0.27, 0.94],[59.74, 63.50, 230.07, 0.28, 0.94],[58.66, 62.67, 228.90, 0.27, 0.94],[59.60, 63.51, 229.79, 0.28, 0.94],[58.42, 62.43, 229.92, 0.27, 0.94],
    [59.57, 63.48, 230.15, 0.28, 0.94],[113.38, 118.28, 229.07, 0.52, 0.96],[114.26, 118.80, 228.95, 0.52, 0.96],[113.65, 118.62, 229.01, 0.52, 0.96],
    [114.37, 119.17, 228.95, 0.52, 0.96],[114.47, 119.28, 228.93, 0.52, 0.96],[114.30, 119.33, 228.80, 0.52, 0.96],[114.63, 119.48, 228.91, 0.52, 0.96],
    [113.52, 118.08, 228.83, 0.52, 0.96],[114.90, 119.56, 228.92, 0.52, 0.96],[115.31, 120.04, 229.75, 0.52, 0.96],[113.55, 118.28, 228.85, 0.52, 0.96],
    [114.73, 119.32, 228.64, 0.52, 0.96],[114.90, 119.60, 228.75, 0.52, 0.96],[115.74, 120.39, 229.55, 0.52, 0.96],[113.98, 118.88, 228.90, 0.52, 0.96],
    [114.75, 119.25, 228.88, 0.52, 0.96],[114.29, 119.02, 228.97, 0.52, 0.96],[114.41, 119.17, 228.92, 0.52, 0.96],[172.94, 179.17, 230.67, 0.78, 0.97],
    [172.12, 177.94, 230.67, 0.77, 0.97],[171.54, 177.20, 230.47, 0.77, 0.97],[171.69, 177.39, 230.50, 0.77, 0.97],[172.16, 177.83, 230.40, 0.77, 0.97],
    [172.87, 178.36, 230.47, 0.77, 0.97],[171.71, 177.43, 230.45, 0.77, 0.97],[171.94, 177.60, 230.50, 0.77, 0.97],[171.82, 177.36, 230.46, 0.77, 0.97],
    [172.10, 177.78, 230.51, 0.77, 0.97],[172.35, 178.07, 230.46, 0.77, 0.97],[172.07, 177.62, 230.57, 0.77, 0.97],[172.48, 178.13, 230.45, 0.77, 0.97],
    [171.91, 177.54, 230.52, 0.77, 0.97],[172.64, 178.02, 230.40, 0.77, 0.97],[172.37, 178.00, 230.53, 0.77, 0.97],[172.18, 177.64, 230.30, 0.77, 0.97],
    [172.02, 177.58, 230.47, 0.77, 0.97],[223.25, 229.93, 229.77, 1.00, 0.97],[223.37, 229.94, 229.85, 1.00, 0.97],[222.35, 229.00, 229.80, 1.00, 0.97],
    [221.94, 228.78, 229.62, 1.00, 0.97],[221.68, 228.36, 229.59, 0.99, 0.97],[221.87, 228.55, 229.86, 0.99, 0.97],[222.08, 228.79, 229.58, 1.00, 0.97],
    [223.70, 230.29, 229.94, 1.00, 0.97],[222.94, 229.59, 229.70, 1.00, 0.97],[223.41, 229.81, 229.90, 1.00, 0.97],[222.17, 229.00, 229.88, 1.00, 0.97],
    [223.46, 229.91, 229.86, 1.00, 0.97],[221.85, 228.37, 229.75, 0.99, 0.97],[223.26, 229.89, 229.83, 1.00, 0.97],[223.35, 229.67, 229.92, 1.00, 0.97],
    [222.78, 229.50, 229.92, 1.00, 0.97],[222.19, 229.08, 229.72, 1.00, 0.97],[223.67, 230.58, 229.93, 1.00, 0.97]])
    y = np.array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])
    from sklearn.svm import SVC
    from sklearn.svm import NuSVC
    clf = NuSVC(probability=True)
    clf.fit(X, y)
    #print("Device 4 Type Data Set: ")
    #print(clf.predict([[221.41, 227.81, 229.60, 1.00, 0.95]]))
    #print("Device 2 Type Data Set: ")
    #print(clf.predict([[112.74, 118.39, 227.55, 0.55, 0.93]]))
    #print("Device 1 Type Data Set: ")
    #print(clf.predict([[56.28, 64.18, 227.84, 0.29, 0.96]]))
    #print("Device 1 Type Data Set: ")
    #print(clf.predict([[59.77, 63.66, 231.34, 0.24, 0.92]]))
    #print("Device 3 Type Data Set: ")
    #print(clf.predict([[171.37, 178.10, 230.23, 0.76, 0.97]]))
    #print("Device X Type Data Set: ")
    #print(clf.predict([[571.37, 478.10, 330.23, 0.76, 0.97]]))
    X_input = np.asarray(X_input)
    print(clf.predict(X_input))
    X1=[[571.37, 478.10, 330.23, 0.76, 0.97]]
    y1=[2]

    #X_test=np.array([[571.37, 478.10, 330.23, 0.76, 0.97],[221.41, 227.81, 229.60, 1.00, 0.95],[112.74, 118.39, 227.55, 0.55, 0.93],[56.28, 64.18, 227.84, 0.29, 0.96],[171.37, 178.10, 230.23, 0.76, 0.97]])
    #y_test=np.array([5,4,2,1,3])
    #score1=clf.score(X_test,y_test)
    #print("Score : ",score1)
    #pre =clf.predict_proba(X_test)
    #print(pre)
    
identify('58.62, 62.33, 232.45, 0.27, 0.94')




#v = clf.decision_function(X)
#print("dec",v)

